

SpectVis is the spectrogram visualization of the inbound wavebuffer_t
data,. 

Things to watch out for: 
  - incoming wavebuffer_t's may have differing lengths, ranging from 1 to N
  - incoming wavebuffer_t's may have differing sample rates


Parameters for specgram we might want to vary: 
   Length of specgram (how many samples / points)
   Scaling of range 
   Linear vs log scale
   linear vs log spectral scale

   can we plot a spectrum chart over it? 

   Degree of overlap? 

We're going to keep all of this in a BDB cache. it's not
entirely clear how we're going to solve the following two problems: 

1. When we change the visualization settings like (say) length
of specgram, it will result in a recomputation of all of the data. 

So ideally there will be some out-of-thread / only at idle method for
performing this computation.

It's not quite clear what the right spectrum scale will be


FFTW speed
----------------------
The "signalbench" function suggests that we can FFT 
about 1.1e8 samples/second, which means that for a
6 hour 32ksps (691 Msample) data record it would take
~6 seconds, or about 1 second per hour of data (per channel).

Now, there's no way we can process and write that much data
to the disk -- BDB clocks in at about 30 MB/sec. 

6 hours of data is ~3 GB, which would take about 100 seconds (2 min)
to filter all the way through. Again, not the end of the
world, assuming we can interrupt. 

(and most data won't be at 32ksps, but a lot slower, so whee)

challenges: Prioritizing the operations
using BDB as a cross-thread synchronization medium

Generic framework
---------------------
input data  -> fft preprocessor -> fft processor -> renderer


FFTEngine: 
takes in a stream of WaveBuffers, and 


