[/
    Copyright (c) 2008-2009 Joachim Faulhaber

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]


[/ //= Symmetric Difference ===================================================]
[section Symmetric Difference]

[section Synopsis][/ Symmetric difference]

[table
[[Symmetric difference]                       [__ch_itv_sets__][__ch_itv_maps__][itl::set][itl::map] ]
[[`T& T::flip(const P&)`]                                    [__ei]    [__bp]   [__e]   [__b]     ]
[[`T& operator ^=(T&, const P&)`]                            [__eiS]   [__bpM]  [__es]  [__bm]    ]
[[`T operator ^ (T, const P&)`\n`T operator ^ (const P&, T)`][__eiS]   [__bpM]  [__es]  [__bm]    ]
]

Functions and operators that implement ['*symmetric difference*] on *itl* objects
are given in the table above.

[table
[[]      [Description of symmetric difference]]
[[`Sets`][`operator ^` implements ['*set symmetric difference*]]]
[[`Maps`][`operator ^` implements a ['*map symmetric difference*] 
          function similar to /set symmetric difference/.
          All pairs that are common to both arguments are removed. All others unified.
         ]]
]


[endsect][/ Synopsis Symmetric difference]

[section Member functions][/ Symmetric difference]

/Symmetric difference/ is implemented on interval containers
by the member function `T& T::flip(const P& operand)`.

``
y.flip(x)
`` 

deletes every element of `y`, 
if it is contained in `x`. Elements of
`x` not contained in `y` are added.
[/ paratract, surtract, symetract, topple, symmetric_subtract]

The admissible combinations of types for member function 
`T& T::flip(const P&)` can be summarized in the 
['*overload table*] below:

``
// overload table for
T& T::flip(const P&)

flip | e i b p    
-----+--------
 s   | s
 m   |     m
 S   | S S         
 M   |     M M    
``

The next table contains complexity characteristics for member functions `flip`.

[table Time Complexity for member functions flip on itl containers
[[`T& T::flip(const P&)`]      [__ch_dom_t__][__ch_itv_t__][__ch_dom_mp_t__][__ch_itv_mp_t__]]
[[__itl_set__]                 [__Olgn__] []          []        []          ]
[[__itl_map__]                 []         []          [__Olgn__][]          ]
[[__itv_set__\n__sep_itv_set__][__Olgn__] [__On__]    []        []          ]
[[__spl_itv_set__]             [__Olgn__] [__On__]    []        []          ]
[[__itv_map__\n__spl_itv_map__][]         []          [__Olgn__][__On__]    ]
]

[endsect][/ Member functions Symmetric difference]


[section Inplace operators][/ Symmetric Difference]

The overload tables below are giving admissible
type combinations for `operator ^=`
that implements ['*symmetric difference*].

``
// overload tables for
T& operator ^= (T&, const P&)

element containers:     interval containers:  
^= | e b s m            ^= | e i b p S M    
---+--------            ---+------------    
s  | s   s              S  | S S     S       
m  |   m   m            M  |     M M   M    
``


Complexity characteristics for inplace operators
that implement ['*symmetric difference*]
are given by the next tables where 
``
n = y.iterative_size();
m = x.iterative_size(); //if P is a container
``

[table Time Complexity for inplace symmetric difference on element containers
[[`T& operator &= (T& y, const P& x)`][__ch_dom_t__][__ch_dom_mp_t__][__ch_itl_set__][__ch_itl_map__]]
[[__itl_set__]                    [__Olgn__]    []               [__Omlgn__]     []              ]
[[__itl_map__]                    [__Olgn__]    [__Olgn__]       [__Omlgn__]     [__Omlgn__]     ]
]

[table Time Complexity for inplace symmetric difference on interval containers
[[`T& operator &= (T&, const P&)`][__ch_dom_t__][__ch_itv_t__][__ch_dom_mp_t__][__ch_itv_mp_t__][__ch_itv_sets__][__ch_itv_maps__]]
[[interval_sets]                  [__Olgn__]    [__On__]      []               []               [__Omlgnpm__]    []               ]
[[interval_maps]                  [__Olgn__]    [__On__]      [__Olgn__]       [__On__]         [__Omlgnpm__]    [__Omlgnpm__]    ]
]

[endsect][/ Inplace operators Symmetric Difference]

[section Infix operators][/ Symmetric Difference]

For the infix version of symmetric difference the
following overloads are available:

``
// overload tables for
T operator ^ (T, const P&)
T operator ^ (const P&, T)

element containers:     interval containers:
^  | e b s m            ^  | e  i  b  p  S1 S2 S3 M1 M3     
---+--------            ---+---------------------------
e  |     s              e  |             S1 S2 S3
b  |       m            i  |             S1 S2 S3
s  | s   s              b  |                      M1 M3  
m  |   m   m            p  |                      M1 M3
                        S1 | S1 S1       S1 S2 S3
                        S2 | S2 S2       S2 S2 S3
                        S3 | S3 S3       S3 S3 S3
                        M1 |       M1 M1          M1 M3
                        M3 |       M3 M3          M3 M3
``

To resolve ambiguities among interval containers
the ['*finer*] container type is chosen as result type.

[endsect][/ Infix operators Symmetric Difference]

[endsect][/ Symmetric Difference]


