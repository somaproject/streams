/*-----------------------------------------------------------------------------+    
Copyright (c) 1999-2006: Cortex Software GmbH, Kantstrasse 57, Berlin
+------------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+-----------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------
set of strings
---------------------------------------------------------------------------------*/
#ifndef  BOOST_ITL_STRING_SET_HPP_JOFA_990318
#define  BOOST_ITL_STRING_SET_HPP_JOFA_990318

#include <string>
#include <string.h>
#include <boost/itl/set.hpp>

namespace boost{namespace itl
{
    typedef std::string StringTD;
    typedef StringTD (StringTD::* StringSelectorFPD)()const; 

    // Compare class for Strings ignoring case
    template<typename StringT>
    struct  String_ICLess {
        bool operator() (const StringT& c1, const StringT& c2) const 
        { return _stricmp(c1.c_str(), c2.c_str()) < 0; }
    };

    template<typename StringT>
    struct  String_Less {
        bool operator() (const StringT& c1, const StringT& c2) const 
        { return c1 < c2; }
    };

    // ---------------------------------------------------------------------------------
    // sets of strings
    // ---------------------------------------------------------------------------------

    template <ITL_COMPARE Compare = std::less>
    class string_set: public itl::set<std::string, Compare>
    {
    public:
        typedef itl::set<std::string, Compare> base_type;
        typedef typename base_type::iterator iterator;
        typedef typename base_type::const_iterator const_iterator;
        
    public:
        std::string as_string(char* sep = " ")const; // JODO URG Sync 
        std::string join(char* sep = " ")const { return as_string(sep); } // JODO URG Sync 
        void selectSet(string_set& selectees, StringSelectorFPD selector)const;
    } ;


    // ---------------------------------------------------------------------------------
    // sets of strings ordered ignoring case
    // ---------------------------------------------------------------------------------

    typedef string_set<String_ICLess> ICstring_set; //CL depreciated
    typedef string_set<String_ICLess> ICstring_setD;
    

    template <ITL_COMPARE Compare>
    std::string string_set<Compare>::as_string(char* sep)const
    {
        const_iterator it = this->begin();
        if(it == this->end()) return std::string("");
        else
        {
            std::string y(*it++);
            while(it != this->end()) { y += sep; y += (*it++); }
            return y;
        }
    }


    template <ITL_COMPARE Compare>
    void string_set<Compare>::selectSet(string_set& selectees, StringSelectorFPD selector)const
    {
        selectees.clear();
        ITL_const_FORALL_THIS(it)
            selectees.insert(((*it).*selector)());
    }
}} // namespace boost itl


#endif


