/*-----------------------------------------------------------------------------+    
Copyright (c) 2007-2009: Joachim Faulhaber
+------------------------------------------------------------------------------+
Copyright (c) 1999-2006: Cortex Software GmbH, Kantstrasse 57, Berlin
+------------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+-----------------------------------------------------------------------------*/

#ifndef __group_order_JOFA_040621_H__
#define __group_order_JOFA_040621_H__

#include <functional>
#include <boost/itl_xt/fixtupelconst.hpp>
#include <boost/itl/map.hpp>

namespace boost{namespace itl
{
    template <int VarCount> class var_tuple;

    /// Strict weak ordering on var_tuple that defines grouping via induced equivalence
    /** Gruppierung kann man so ausdrücken, dass alle Werte, die in gleiche Gruppen
        zusammenfallen, äquivalent sind.

        Werte, die nicht in Gruppen zusammenfallen sind nicht äquivalent.
        
        Wir erhalten diese Äquivalenz auch durch eine strikt schwachen Ordnung <.
        Denn wenn !(x < y) && !(y < x) dann gilt x ~= y. Wenn also zwei Werte weder
        kleiner noch grösser bzgl. einer strikt schwachen Ordnung sind, dann sind sie
        äquivalent.

        Diesen Zusammenhang machen wir uns zunutze, um möglichst viel (wenn nicht sogar
        alles) was mit Äquivalenzen zu tun hat auch durch strikt schwache Ordnungen und
        stl-containern ausdrücken zu können.

        Wegen des allgemeinen Falls, einer bedingten Gruppierung, bei dem die
        Gruppierung einer Variable von den Werten anderer Variablen abhängt,
        definieren wir die GroupOrder nicht als

        binary_function<StatVarTD,     StatVarTD,     bool>      sondern als
        binary_function<var_tuple, var_tuple, bool>
    */
    template <int VarCount>
    class group_order : public std::binary_function<var_tuple<VarCount>, var_tuple<VarCount>, bool>
    {
    public:
        typedef var_tuple<VarCount> var_tupleD;
    public:
        /** Die strikt schwache Ordnung, die auch die Äquivalenz induziert! Sie wird
            in abgeleiteten Klassen implementiert. */
        virtual    bool operator() (const var_tupleD& lhs, const var_tupleD& rhs)const=0;

        /// Get the index of the variable that is grouped by the order.
        virtual VarEnumTD getVarIndex()const=0;

        /** Die Äquivalenz ergibt sich aus der Ordnung (operator()). Deshalb 
            besitzt die Funktion eine entsprechende Default-implementierung. 
            Wir können aber oft eine effizientere Implementierung in der
            abgeleiteten Klasse angeben.
        */
        virtual bool areEquivalent(const var_tupleD& lhs, const var_tupleD& rhs)const
        {
            return !operator()(lhs, rhs) && !operator()(rhs, lhs);
        }
    };

}} // namespace itl boost

#endif // __group_order_JOFA_040621_H__


