/*-----------------------------------------------------------------------------+    
Copyright (c) 2007-2009: Joachim Faulhaber
+------------------------------------------------------------------------------+
Copyright (c) 1999-2006: Cortex Software GmbH, Kantstrasse 57, Berlin
+------------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+-----------------------------------------------------------------------------*/
#ifndef __var_tuple_order_JOFA_040620_H__
#define __var_tuple_order_JOFA_040620_H__

#include <functional>
#include <boost/itl/detail/notate.hpp>
#include <boost/itl_xt/fixtupelconst.hpp>
#include <boost/itl_xt/var_tuple.hpp>
#include <boost/itl_xt/var_permutation.hpp>
#include <boost/itl_xt/grouping.hpp>

namespace boost{namespace itl
{

    // template <typename VarTupleT> class var_permutation {};

    template <typename VarTupleT>
    class var_tuple_order : public std::binary_function<VarTupleT, VarTupleT, bool>
    {
    public:
        enum { varCountV = VarTupleT::var_count };
        typedef var_permutation<varCountV>    var_permutationT;
        typedef grouping<varCountV>           groupingT;
        typedef group_order<varCountV>        group_orderT;

        var_tuple_order();
        var_tuple_order(const var_tuple_order&, const var_permutationT&);

        bool operator() (const VarTupleT& x1, const VarTupleT& x2)const;

        /** Index des ersten Unterschieds zweier Tupel (gemäss der permutierten Reihenfolge).
            Die permutierte Reihenfolge ist ja die jeweils gültige Reihenfolge.        */
        VarEnumTD indexOfFirstDifference(const VarTupleT& x1, const VarTupleT& x2)const;

        void setPermutation(const var_permutationT& perm) { m_Permutation = perm; }
        var_permutationT getPermutation()const { return m_Permutation; }

        void setGroupOrder(group_orderT* order) { m_Grouping.setGrouper(order, order->getVarIndex()); }

        /** Liefert den reduzierten Aggregationsgrad einer Teilordnung, die in *this enthalten ist. */
        int gradeReduct(int grade, const var_tuple_order& subOrder)const 
        { return m_Permutation.gradeReduct(grade, subOrder.getPermutation()); }

    private:
        // Permutation can also express projection. All independent vars not included in
        // the permutation are switched off
        var_permutationT m_Permutation;

        // Conditional and unconditional Grouping
        groupingT         m_Grouping;
    };

    template <typename VarTupleT>
    itl::var_tuple_order<VarTupleT>::var_tuple_order ()
    {
        m_Permutation.setIdentity();
    }

    template <typename VarTupleT>
    itl::var_tuple_order<VarTupleT>::var_tuple_order (const var_tuple_order& order, const var_permutationT& perm):
        m_Grouping(order.m_Grouping), m_Permutation(perm)
    {}

    
    template <typename VarTupleT>
    bool itl::var_tuple_order<VarTupleT>::operator() (const VarTupleT& x1, const VarTupleT& x2)const
    {
        ITL_FORALL_VEC(permIdx, m_Permutation)
        {
            int idx = m_Permutation[permIdx];

            // Den Pointer der Gruppierungsordnung besorgen
            const group_orderT* groupedLess = m_Grouping[idx];

            if(groupedLess == NULL)
            {
                if(x1[idx] < x2[idx])
                    return true;
                if(x1[idx] > x2[idx])
                    return false;
                // OTHERWISE (x1[idx] == x2[idx]): proceed to next variable
            }
            else
            {
                if((*groupedLess)(x1,x2))
                    return true;
                if((*groupedLess)(x2,x1))
                    return false;
                // OTHERWISE x1 and x2 belong to same group. Proceed to next var
            }
            
        }
        // All components are equal
        return false;
    }

    template <typename VarTupleT>
    VarEnumTD itl::var_tuple_order<VarTupleT>::indexOfFirstDifference(const VarTupleT& x1, const VarTupleT& x2)const
    {
        ITL_FORALL_VEC(permIdx, m_Permutation)
        {
            int idx = m_Permutation[permIdx];

            // Den Pointer der Gruppierungsordnung besorgen
            const group_orderT* groupedLess = m_Grouping[idx];

            if(groupedLess == NULL)
            {
                if(x1[idx] < x2[idx])
                    return permIdx;
                if(x1[idx] > x2[idx])
                    return permIdx;
                // OTHERWISE (x1[idx] == x2[idx]): proceed to next variable
            }
            else
            {
                if((*groupedLess)(x1,x2))
                    return  permIdx;
                if((*groupedLess)(x2,x1))
                    return  permIdx;
                // OTHERWISE x1 and x2 belong to same group. Proceed to next var
            }
            
        }
        // All components are equal
        return UNDEFINED_INDEX;
    }

}} // namespace itl boost

#endif // __var_tuple_order_JOFA_040620_H__


