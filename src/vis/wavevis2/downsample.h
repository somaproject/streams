#ifndef __VIS_WAVEVIS2_DOWNSAMPLE_H__
#define __VIS_WAVEVIS2_DOWNSAMPLE_H__

#include <iostream>
#include <vector>
#include <ctime>
#include <fstream>
#include <algorithm>
#include <string>


#include "types.h"

namespace wavevis2 { 


struct MinMaxVector
{
  /* 
     Note that the times are all relative the star ttime
   */ 
  timeid_t start; 
  timeid_t end; 
  float minval; 
  float maxval; 
  
  std::vector<float> mins; 
  std::vector<float> maxs; 
  std::vector<float> times; 
}; 

typedef boost::shared_ptr<MinMaxVector> pMinMaxVector_t; 

pMinMaxVector_t downsample_minmax_1(pWaveBuffer_t wb); 
pMinMaxVector_t downsample_minmax_var(pWaveBuffer_t wb, int scale); 



/* Graham Scan code adapted from Dr. Dobbs article */ 
class GrahamScan
{
public :
  typedef std::pair<float, float> point_t; 
  typedef std::vector<point_t> pointvect_t; 

  GrahamScan(const pointvect_t & points); 

  void partition_points();
  void build_hull( std::ofstream &f ); 
  void build_half_hull( std::ostream &f, 
			pointvect_t input,
			pointvect_t &output,
			int factor ); 
  static int direction( point_t p0,
			point_t p1,
			point_t p2 );
private :
    //
    // These values determine the range of numbers generated to 
    // provide the input data. The values are all passed in as part
    // of the constructor
    //
  
    // The raw data points generated by the constructor
  pointvect_t raw_points;
    //
    // These values are used to represent the partitioned set. A special
    // leftmost and rightmost value, and the sorted set of upper and lower
    // partitioned points that lie inside those two points.
    //
  point_t left;
    point_t right;
    pointvect_t upper_partition_points;
    pointvect_t lower_partition_points;
    //
    // After the convex hull is created, the lower hull and upper hull
    // are stored in these sorted sequences. There is a bit of duplication
    // between the two, because both sets include the leftmost and rightmost point.
    //
    pointvect_t lower_hull;
    pointvect_t upper_hull;
};


}

#endif 
